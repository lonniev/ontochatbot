{ var bodyTerminator; }

start = github request:request { return request }

ws = ([ \t\r\n])*
WS = ([ \t\r\n])+

github = ws keyword:'github'i { return keyword.toLowerCase() }
issue = ws keyword:'issue'i { return keyword.toLowerCase() }
issues = ws keyword:'issues'i { return keyword.toLowerCase() }
new = ws keyword:'new'i { return keyword.toLowerCase() }
close = ws keyword:'close'i { return keyword.toLowerCase() }
get = ws keyword:'get'i { return keyword.toLowerCase() }
search = ws keyword:'search'i { return keyword.toLowerCase() }
list = ws keyword:'list'i { return keyword.toLowerCase() }
comment = ws keyword:'comment'i { return keyword.toLowerCase() }
summarize = ws keyword:'summarize'i { return keyword.toLowerCase() }
comment = ws keyword:'comment'i { return keyword.toLowerCase() }
add = ws keyword:'add'i { return keyword.toLowerCase() }
create = ws keyword:'create'i { return keyword.toLowerCase() }
for = ws keyword:'for'i { return keyword.toLowerCase() }
on = ws keyword:'on'i { return keyword.toLowerCase() }
to = ws keyword:'to'i { return keyword.toLowerCase() }
in = ws keyword:'in'i { return keyword.toLowerCase() }
a = ws keyword:'a'i { return keyword.toLowerCase() }
an = ws keyword:'an'i { return keyword.toLowerCase() }
the = ws keyword:'the'i { return keyword.toLowerCase() }
that = ws keyword:'that'i { return keyword.toLowerCase() }
are = ws keyword:'are'i { return keyword.toLowerCase() }
is = ws keyword:'is'i { return keyword.toLowerCase() }
state = ws keyword:'state'i { return keyword.toLowerCase() }
open = ws keyword:'open'i { return keyword.toLowerCase() }
closed = ws keyword:'closed'i { return keyword.toLowerCase() }
any = ws keyword:'any'i { return keyword.toLowerCase() }
milestone = ws keyword:'milestone'i { return keyword.toLowerCase() }
labels = ws keyword:'labels'i { return keyword.toLowerCase() }

that_are = that? (are / is)?

username = ws token:[a-z]i+ { return token.join( '' ); }

blame = for WS '@' { return 'blame' }

file = ws keyword:'file'i { return keyword.toLowerCase() }

issue_id = ws token:[0-9]+ { return token.join( '' ) }
target_issue = ws '#'? issue:issue_id { return { "issue": issue } }

article = a / an / the
verb = new / close / search / get / comment
pause = ws [\,\;\=\.\>] ws


request = ((new/add/create)+ issue data:issue_operation) { return { "method": "new_issue", "data": data } }
        / (close issue data:target_issue) { return { "method": "close_issue", "data": data } }
        / ((search/list) issues data:search_operation) { return { "method": "search_issues", "data": data } }
        / ((add/new/create)+ comment (for/to/on)? data:comment_operation) { return { "method": "comment_issue", "data": data } }
        / (file file_operation)

issue_operation = props_before:issue_property* title:issue_summary props_after:issue_property* bodytext:body?
{
  function hasProperty( property )
  {
    return this in property;
  }

  var data = {};

  var props = props_before.concat( props_after );

  if ( title ) data.title = title;

  var assigneeProperty = props.filter( hasProperty, "assignee" );

  if (assigneeProperty.length > 0) data.assignee = assigneeProperty[0].assignee

  var milestoneProperty = props.filter( hasProperty, "milestone" );

  if (milestoneProperty.length > 0) data.milestone = milestoneProperty[0].milestone

  var labelsProperty = props.filter( hasProperty, "labels" );

  if (labelsProperty.length > 0) data.labels = labelsProperty[0].labels

  if ( bodytext ) data.body = bodytext;

  return data;
}

comment_operation = issue? target:target_issue pause? content:comment_text
{
  return {
    "issue": target.issue,
    "body": content
  };
}

comment_text =
  (first: issue_summary) ws (second: body) { return [ first, second ].join( " " ); }
  / issue_summary
  / body

search_operation = title:issue_summary? props:issue_property* bodytext:body?
{
  function hasProperty( property )
  {
    return this in property;
  }

  var data = { whereclause: "" };

  if ( title && ( title.length > 0 ) ) data.whereclause = [
    title.replace( /\s/, ' ' ),
    data.whereclause
  ].join( ' ' );

  var assigneeProperty = props.filter( hasProperty, "assignee" );

  if (assigneeProperty.length > 0) data.whereclause = [
    data.whereclause,
    "involves:" + assigneeProperty[0].assignee
  ].join( ' ' );

  var labelsProperty = props.filter( hasProperty, "labels" );

  if (labelsProperty.length > 0) data.whereclause = [
    data.whereclause,
    labelsProperty[0].labels.map( function( elem, index, all ) { "label:" + elem } )
  ].join( ' ' );

  var stateProperty = props.filter( hasProperty, "state" );

  if ( ( stateProperty.length > 0 ) && ( stateProperty[0].state != "any" ) ) data.whereclause = [
    data.whereclause,
    "state:" + stateProperty[0].state
  ].join( ' ' );

  if ( bodytext ) data.whereclause = [
    bodytext.replace( /\s/, ' ' ),
    data.whereclause
  ].join( ' ' );

  data.whereclause = data.whereclause.replace( /\s*(.*?)\s*/, "$1" );

  return data;
}

issue_property = value:assignee { return { "assignee":value } }
               / value:due { return { "milestone":value } }
               / value:labelset { return { "labels":value } }
               / value:status { return { "state": value } }

status = that_are state:in_state { return state }

in_state = in? article? state:state_name state?  { return state }

state_name = state:( open / closed / any ) { return state }
due = milestone value:milestone_id { return value }

milestone_id = ws token:[0-9]+ { return token.join( '' ) }

labelset = labels ws '[' ws token:(label_id)+ ws ']' { return token }
label_id = string

file_operation = get

issue_summary = string

assignee = blame assignee:username { return assignee }

herestart = ws token:'<HERE' { return token }
hereend = token:'END' { return token }

body = token:DelimitedBodyVariable { return token }

string "string"
  = ws quotation_begin token:char* quotation_end { return token.join(""); }

char
  = unescaped
  / escape
    sequence:(
        '"'
      / "\\"
      / "/"
      / "b" { return "\b"; }
      / "f" { return "\f"; }
      / "n" { return "\n"; }
      / "r" { return "\r"; }
      / "t" { return "\t"; }
      / "u" digits:$(HEXDIG HEXDIG HEXDIG HEXDIG) {
          return String.fromCharCode(parseInt(digits, 16));
        }
    )
    { return sequence; }

escape         = "\\"
quotation_begin = [\"\u00AB\u201C\u201F]
quotation_end = [\"\u201D\u300B\u301E\u301F]

unescaped      = [\'\u2018\u2019\x20-\x21\x23-\x5B\x5D-\u10FFFF]

/* ----- Core ABNF Rules ----- */

/* See RFC 4234, Appendix B (http://tools.ietf.org/html/rfc4627). */
DIGIT  = [0-9]
HEXDIG = [0-9a-f]i

DelimitedBodyVariable
  = ws "<<<" terminator:Text1 EOLF
    &{ bodyTerminator = terminator; return true; }
    lines:DelimitedBodyVariableLine*
    DelimitedBodyVariableTerminator
    {
      return lines.join("\n");
    }

DelimitedBodyVariableLine
  = !DelimitedBodyVariableTerminator text:Text0 EOL { return text; }

DelimitedBodyVariableTerminator
  = terminator:Text1 EOLF &{ return terminator === bodyTerminator }

Text0 "zero or more characters"
  = chars:[^\n\r]* { return chars.join(""); }

Text1 "one or more characters"
  = chars:[^\n\r]+ { return chars.join(""); }

EmptyLine "empty line"
  = S* EOL

EOLF "end of line or file"
  = EOL / EOF

EOL "end of line"
  = "\n"
  / "\r\n"
  / "\r"

EOF "end of file"
  = !. { return ""; }
  
/*
 * What "\s" matches in JavaScript regexps, sans "\r", "\n", "\u2028" and
 * "\u2029". See ECMA-262, 5.1 ed., 15.10.2.12.
 */
S "whitespace"
  = [\t\v\f \u00A0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\uFEFF]
